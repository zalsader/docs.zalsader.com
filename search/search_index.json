{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to zalsader's Docs!","text":"<p>Inspired by galexrt docs, this is a collection of tools and tips I find useful. Feel free to use any of them for any reason, at your own risk; no warranty is provided. Licensed under the MIT license.</p>"},{"location":"linux/aliases/","title":"Aliases","text":"<p>All my aliases could be found in my chezmoi repository. Some notable examples:</p>"},{"location":"linux/aliases/#kubectl-with-completions","title":"kubectl with completions","text":"<p>I use <code>kubectl</code> a lot, so I created an alias <code>k</code> for it. To enable completions, I used complete-alias.</p> <pre><code>alias watch='watch '\nsource ~/.bash_completion.d/complete_alias\nalias k=kubectl\ncomplete -F _complete_alias k\n</code></pre>"},{"location":"linux/aliases/#useful-git-commands","title":"Useful git commands","text":"<pre><code>alias gfpush='git push --force'\nalias grmain='git rebase main'\n\n# Force pull\ngpullf () { \n    git fetch --all &amp;&amp; git reset --hard origin/$(git branch --show-current); \n}\n\n# Prune merged branches from local repository\ngprune () {\n    MAIN=$(git remote show origin | sed -n '/HEAD branch/s/.*: //p')\n    git checkout -q $MAIN &amp;&amp; git for-each-ref refs/heads/ \"--format=%(refname:short)\" | while read branch; do mergeBase=$(git merge-base $MAIN $branch) &amp;&amp; [[ $(git cherry $MAIN $(git commit-tree $(git rev-parse \"$branch^{tree}\") -p $mergeBase -m _)) == \"-\"* ]] &amp;&amp; git branch -D $branch; done; git fetch -p\n}\n</code></pre>"},{"location":"linux/aliases/#pipe-to-clipboard","title":"Pipe to clipboard","text":"<p>To pipe to system clipboard, use <code>xclip</code>.</p> <pre><code>echo \"Hello World!\" | xclip -sel clip\nxclip -sel clip | cat\n</code></pre> <p>I use it so much I added an alias for it: <pre><code>alias clip=\"xclip -sel clip\"\n</code></pre></p>"},{"location":"linux/input%20switcher/","title":"Input switcher","text":"<p>Inspired by marcelhoffs/input-switcher, I decided to create my own script for switching keyboard, mouse and monitor inputs with one button.</p>"},{"location":"linux/input%20switcher/#dependencies","title":"Dependencies:","text":"<ul> <li>Solaar: https://pwr-solaar.github.io/Solaar/</li> <li>ddcutil: https://www.ddcutil.com/</li> </ul>"},{"location":"linux/input%20switcher/#the-script","title":"The script","text":"switch_input.sh<pre><code>#!/bin/bash\nCAHNNEL=$1\nMONITOR=$2\n\n# Switch monitor input\nddcutil setvcp 60 0x1${MONITOR} -d 1 &amp;\nddcutil setvcp 60 0x1${MONITOR} -d 2 &amp;\n\n# Switch keyboard and mouse inputs\nsolaar config \"M720 Triathlon\" change-host $CAHNNEL\nsolaar config \"K850\" change-host $CAHNNEL\nexit 0\n</code></pre>"},{"location":"linux/input%20switcher/#installation","title":"Installation","text":"<pre><code>chmod +x path/to/switch_input.sh\n\n# needed to run the script without sudo\nsudo chmod a+rw /dev/hidraw*\nsudo chmod a+rw /dev/i2c-*\n</code></pre> <p>Then bind <code>path/to/switch_input.sh 1 1</code> as a shortcut via Settings &gt; Keyboard &gt; View and Customize Shortcuts &gt; Custom Shortcuts</p>"},{"location":"linux/mouse/","title":"Logitech mouse","text":"<p>I have a logitech M720 mouse and a logitech K850 keyboard. There are no offical drivers for linux, so I am using PixlOne/logiops. This is my config for the mouse:</p> /etc/logid.cfg<pre><code>devices: (\n{\n    name: \"M720 Triathlon Multi-Device Mouse\";\n    smartshift:\n    {\n        on: true;\n        threshold: 20;\n    };\n    hiresscroll:\n    {\n        hires: true;\n        invert: false;\n        target: false;\n    };\n    dpi: 1000;\n    buttons: (\n    {\n            cid: 0xd0;\n            action =\n            {\n                type: \"Gestures\";\n                gestures: (\n                    {\n                        direction: \"Up\";\n                        mode: \"OnRelease\";\n                        action =\n                        {\n                            type: \"Keypress\";\n                            keys: [\"KEY_LEFTALT\", \"KEY_TAB\"];\n                        };\n                    },\n                    {\n                        direction: \"Down\";\n                        mode: \"OnRelease\";\n                        action =\n                        {\n                            type: \"Keypress\";\n                            keys: [\"KEY_LEFTMETA\", \"KEY_D\"];\n                        };\n                    },\n                    {\n                        direction: \"Left\";\n                        mode: \"OnRelease\";\n                        action =\n                        {\n                            type: \"Keypress\";\n                            keys: [\"KEY_LEFTCTRL\", \"KEY_LEFTALT\", \"KEY_LEFT\"];\n                        };\n                    },\n                    {\n                        direction: \"Right\";\n                        mode: \"OnRelease\";\n                        action =\n                        {\n                            type: \"Keypress\";\n                            keys: [\"KEY_LEFTCTRL\", \"KEY_LEFTALT\", \"KEY_RIGHT\"];\n                        };\n\n                    },\n                    {\n                        direction: \"None\";\n                        mode: \"OnRelease\";\n            action = \n                        {\n                            type: \"Keypress\";\n                            keys: [\"KEY_LEFTMETA\"];\n                        };\n                    }\n                );\n            };\n        }\n    );\n}\n);\n</code></pre>"}]}